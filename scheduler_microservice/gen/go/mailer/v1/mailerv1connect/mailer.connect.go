// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: mailer/v1/mailer.proto

package mailerv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	v1 "scheduler_microservice/gen/go/mailer/v1"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MailerServiceName is the fully-qualified name of the MailerService service.
	MailerServiceName = "mailer.v1.MailerService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MailerServiceSendEmailsProcedure is the fully-qualified name of the MailerService's SendEmails
	// RPC.
	MailerServiceSendEmailsProcedure = "/mailer.v1.MailerService/SendEmails"
)

// MailerServiceClient is a client for the mailer.v1.MailerService service.
type MailerServiceClient interface {
	// Bidi streaming: на коже EmailRequest відповідь EmailStatusResponse
	SendEmails(context.Context) *connect.BidiStreamForClient[v1.EmailRequest, v1.EmailStatusResponse]
}

// NewMailerServiceClient constructs a client for the mailer.v1.MailerService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMailerServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MailerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	mailerServiceMethods := v1.File_mailer_v1_mailer_proto.Services().ByName("MailerService").Methods()
	return &mailerServiceClient{
		sendEmails: connect.NewClient[v1.EmailRequest, v1.EmailStatusResponse](
			httpClient,
			baseURL+MailerServiceSendEmailsProcedure,
			connect.WithSchema(mailerServiceMethods.ByName("SendEmails")),
			connect.WithClientOptions(opts...),
		),
	}
}

// mailerServiceClient implements MailerServiceClient.
type mailerServiceClient struct {
	sendEmails *connect.Client[v1.EmailRequest, v1.EmailStatusResponse]
}

// SendEmails calls mailer.v1.MailerService.SendEmails.
func (c *mailerServiceClient) SendEmails(ctx context.Context) *connect.BidiStreamForClient[v1.EmailRequest, v1.EmailStatusResponse] {
	return c.sendEmails.CallBidiStream(ctx)
}

// MailerServiceHandler is an implementation of the mailer.v1.MailerService service.
type MailerServiceHandler interface {
	// Bidi streaming: на коже EmailRequest відповідь EmailStatusResponse
	SendEmails(context.Context, *connect.BidiStream[v1.EmailRequest, v1.EmailStatusResponse]) error
}

// NewMailerServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMailerServiceHandler(svc MailerServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	mailerServiceMethods := v1.File_mailer_v1_mailer_proto.Services().ByName("MailerService").Methods()
	mailerServiceSendEmailsHandler := connect.NewBidiStreamHandler(
		MailerServiceSendEmailsProcedure,
		svc.SendEmails,
		connect.WithSchema(mailerServiceMethods.ByName("SendEmails")),
		connect.WithHandlerOptions(opts...),
	)
	return "/mailer.v1.MailerService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MailerServiceSendEmailsProcedure:
			mailerServiceSendEmailsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMailerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMailerServiceHandler struct{}

func (UnimplementedMailerServiceHandler) SendEmails(context.Context, *connect.BidiStream[v1.EmailRequest, v1.EmailStatusResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("mailer.v1.MailerService.SendEmails is not implemented"))
}
