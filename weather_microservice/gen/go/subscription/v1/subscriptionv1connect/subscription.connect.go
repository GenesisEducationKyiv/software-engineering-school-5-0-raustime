// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: subscription/v1/subscription.proto

package subscriptionv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
	v1 "weather_microservice/gen/go/subscription/v1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SubscriptionServiceName is the fully-qualified name of the SubscriptionService service.
	SubscriptionServiceName = "subscription.v1.SubscriptionService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SubscriptionServiceCreateProcedure is the fully-qualified name of the SubscriptionService's
	// Create RPC.
	SubscriptionServiceCreateProcedure = "/subscription.v1.SubscriptionService/Create"
	// SubscriptionServiceConfirmProcedure is the fully-qualified name of the SubscriptionService's
	// Confirm RPC.
	SubscriptionServiceConfirmProcedure = "/subscription.v1.SubscriptionService/Confirm"
	// SubscriptionServiceDeleteProcedure is the fully-qualified name of the SubscriptionService's
	// Delete RPC.
	SubscriptionServiceDeleteProcedure = "/subscription.v1.SubscriptionService/Delete"
	// SubscriptionServiceGetConfirmedProcedure is the fully-qualified name of the SubscriptionService's
	// GetConfirmed RPC.
	SubscriptionServiceGetConfirmedProcedure = "/subscription.v1.SubscriptionService/GetConfirmed"
)

// SubscriptionServiceClient is a client for the subscription.v1.SubscriptionService service.
type SubscriptionServiceClient interface {
	Create(context.Context, *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error)
	Confirm(context.Context, *connect.Request[v1.ConfirmRequest]) (*connect.Response[v1.ConfirmResponse], error)
	Delete(context.Context, *connect.Request[v1.DeleteRequest]) (*connect.Response[v1.DeleteResponse], error)
	GetConfirmed(context.Context, *connect.Request[v1.GetConfirmedRequest]) (*connect.Response[v1.GetConfirmedResponse], error)
}

// NewSubscriptionServiceClient constructs a client for the subscription.v1.SubscriptionService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSubscriptionServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SubscriptionServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	subscriptionServiceMethods := v1.File_subscription_v1_subscription_proto.Services().ByName("SubscriptionService").Methods()
	return &subscriptionServiceClient{
		create: connect.NewClient[v1.CreateRequest, v1.CreateResponse](
			httpClient,
			baseURL+SubscriptionServiceCreateProcedure,
			connect.WithSchema(subscriptionServiceMethods.ByName("Create")),
			connect.WithClientOptions(opts...),
		),
		confirm: connect.NewClient[v1.ConfirmRequest, v1.ConfirmResponse](
			httpClient,
			baseURL+SubscriptionServiceConfirmProcedure,
			connect.WithSchema(subscriptionServiceMethods.ByName("Confirm")),
			connect.WithClientOptions(opts...),
		),
		delete: connect.NewClient[v1.DeleteRequest, v1.DeleteResponse](
			httpClient,
			baseURL+SubscriptionServiceDeleteProcedure,
			connect.WithSchema(subscriptionServiceMethods.ByName("Delete")),
			connect.WithClientOptions(opts...),
		),
		getConfirmed: connect.NewClient[v1.GetConfirmedRequest, v1.GetConfirmedResponse](
			httpClient,
			baseURL+SubscriptionServiceGetConfirmedProcedure,
			connect.WithSchema(subscriptionServiceMethods.ByName("GetConfirmed")),
			connect.WithClientOptions(opts...),
		),
	}
}

// subscriptionServiceClient implements SubscriptionServiceClient.
type subscriptionServiceClient struct {
	create       *connect.Client[v1.CreateRequest, v1.CreateResponse]
	confirm      *connect.Client[v1.ConfirmRequest, v1.ConfirmResponse]
	delete       *connect.Client[v1.DeleteRequest, v1.DeleteResponse]
	getConfirmed *connect.Client[v1.GetConfirmedRequest, v1.GetConfirmedResponse]
}

// Create calls subscription.v1.SubscriptionService.Create.
func (c *subscriptionServiceClient) Create(ctx context.Context, req *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error) {
	return c.create.CallUnary(ctx, req)
}

// Confirm calls subscription.v1.SubscriptionService.Confirm.
func (c *subscriptionServiceClient) Confirm(ctx context.Context, req *connect.Request[v1.ConfirmRequest]) (*connect.Response[v1.ConfirmResponse], error) {
	return c.confirm.CallUnary(ctx, req)
}

// Delete calls subscription.v1.SubscriptionService.Delete.
func (c *subscriptionServiceClient) Delete(ctx context.Context, req *connect.Request[v1.DeleteRequest]) (*connect.Response[v1.DeleteResponse], error) {
	return c.delete.CallUnary(ctx, req)
}

// GetConfirmed calls subscription.v1.SubscriptionService.GetConfirmed.
func (c *subscriptionServiceClient) GetConfirmed(ctx context.Context, req *connect.Request[v1.GetConfirmedRequest]) (*connect.Response[v1.GetConfirmedResponse], error) {
	return c.getConfirmed.CallUnary(ctx, req)
}

// SubscriptionServiceHandler is an implementation of the subscription.v1.SubscriptionService
// service.
type SubscriptionServiceHandler interface {
	Create(context.Context, *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error)
	Confirm(context.Context, *connect.Request[v1.ConfirmRequest]) (*connect.Response[v1.ConfirmResponse], error)
	Delete(context.Context, *connect.Request[v1.DeleteRequest]) (*connect.Response[v1.DeleteResponse], error)
	GetConfirmed(context.Context, *connect.Request[v1.GetConfirmedRequest]) (*connect.Response[v1.GetConfirmedResponse], error)
}

// NewSubscriptionServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSubscriptionServiceHandler(svc SubscriptionServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	subscriptionServiceMethods := v1.File_subscription_v1_subscription_proto.Services().ByName("SubscriptionService").Methods()
	subscriptionServiceCreateHandler := connect.NewUnaryHandler(
		SubscriptionServiceCreateProcedure,
		svc.Create,
		connect.WithSchema(subscriptionServiceMethods.ByName("Create")),
		connect.WithHandlerOptions(opts...),
	)
	subscriptionServiceConfirmHandler := connect.NewUnaryHandler(
		SubscriptionServiceConfirmProcedure,
		svc.Confirm,
		connect.WithSchema(subscriptionServiceMethods.ByName("Confirm")),
		connect.WithHandlerOptions(opts...),
	)
	subscriptionServiceDeleteHandler := connect.NewUnaryHandler(
		SubscriptionServiceDeleteProcedure,
		svc.Delete,
		connect.WithSchema(subscriptionServiceMethods.ByName("Delete")),
		connect.WithHandlerOptions(opts...),
	)
	subscriptionServiceGetConfirmedHandler := connect.NewUnaryHandler(
		SubscriptionServiceGetConfirmedProcedure,
		svc.GetConfirmed,
		connect.WithSchema(subscriptionServiceMethods.ByName("GetConfirmed")),
		connect.WithHandlerOptions(opts...),
	)
	return "/subscription.v1.SubscriptionService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SubscriptionServiceCreateProcedure:
			subscriptionServiceCreateHandler.ServeHTTP(w, r)
		case SubscriptionServiceConfirmProcedure:
			subscriptionServiceConfirmHandler.ServeHTTP(w, r)
		case SubscriptionServiceDeleteProcedure:
			subscriptionServiceDeleteHandler.ServeHTTP(w, r)
		case SubscriptionServiceGetConfirmedProcedure:
			subscriptionServiceGetConfirmedHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSubscriptionServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSubscriptionServiceHandler struct{}

func (UnimplementedSubscriptionServiceHandler) Create(context.Context, *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("subscription.v1.SubscriptionService.Create is not implemented"))
}

func (UnimplementedSubscriptionServiceHandler) Confirm(context.Context, *connect.Request[v1.ConfirmRequest]) (*connect.Response[v1.ConfirmResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("subscription.v1.SubscriptionService.Confirm is not implemented"))
}

func (UnimplementedSubscriptionServiceHandler) Delete(context.Context, *connect.Request[v1.DeleteRequest]) (*connect.Response[v1.DeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("subscription.v1.SubscriptionService.Delete is not implemented"))
}

func (UnimplementedSubscriptionServiceHandler) GetConfirmed(context.Context, *connect.Request[v1.GetConfirmedRequest]) (*connect.Response[v1.GetConfirmedResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("subscription.v1.SubscriptionService.GetConfirmed is not implemented"))
}
