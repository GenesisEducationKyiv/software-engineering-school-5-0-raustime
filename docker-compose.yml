
services:
  weather_service:
    build:
      context: ./weather_microservice
      dockerfile: Dockerfile
    container_name: weather_service
    ports:
      - "8080:8080"
      - "8081:8081"
    environment:
      - PORT=8080
      - GRPC_PORT=8081
      - OPENWEATHER_API_KEY=${OPENWEATHER_API_KEY}
      - WEATHER_API_KEY=${WEATHER_API_KEY}
      - ENVIRONMENT=dev
      - CACHE_ENABLED=true
      - REDIS_ADDR=weather-redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_DB=0
      - REDIS_POOL_SIZE=10
      - REDIS_TIMEOUT_SECONDS=2
      - CACHE_EXPIRATION_MINUTES=10
      - SUBSCRIPTION_SERVICE_URL=http://subscription_service:8091
    depends_on:
      weather-redis:
        condition: service_healthy
    networks:
      - backend

  weather-redis:
    image: redis:7
    container_name: weather-redis
    ports:
      - "6379:6379"
    networks:
      - backend
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 2s
      timeout: 3s
      retries: 10
      start_period: 5s

  scheduler_service:
    build:
      context: ./scheduler_microservice
    depends_on:
      - weather_service
      - mailer_service
      - subscription_service
    environment:
      - SCHEDULER_PORT=8092
      - MAILER_SERVICE_URL=http://mailer_service:8089
      - SUBSCRIPTION_SERVICE_URL=http://subscription_service:8091
      - WEATHER_SERVICE_URL=http://weather_service:8080
    networks:
      - backend

  subscription_service:
    build:
      context: ./subscription_microservice
    depends_on:
      db:
        condition: service_healthy
      mailer_service:
        condition: service_started
    environment:
      - MAILER_GRPC_URL=http://mailer_service:8089
      - DB_URL=postgres://postgres:postgres@db:5432/subscription?sslmode=disable
    networks:
      - backend

  mailer_service:
    build:
      context: ./mailer_microservice
    ports:
      - "8089:8089"
    environment:
      - PORT=8089
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
    networks:
      - backend

  db:
    image: postgres:17
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: subscription
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 2s
      timeout: 3s
      retries: 10
      start_period: 5s

  test-runner-unit:
    image: golang:1.23
    volumes:
      - .:/app
    working_dir: /app
    entrypoint: ""
    command: ["sh", "-c", "cd $${TEST_MODULE} && go test ./... -v"]
  
  test-runner-integration:
    image: golang:1.23
    volumes:
      - .:/app
    working_dir: /app
    command: ["go", "test", "./tests/integration/...", "-v"]
    depends_on:
      weather_service:
        condition: service_started
    networks:
      - backend

networks:
  backend:

volumes:
  pgdata:
